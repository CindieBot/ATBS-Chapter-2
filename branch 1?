#chapter 2


#BOOLEAN VALUES

# != not equal
# <= less or equal
# >= greater or equal

# NOT - simple single expression
# AND - both must be True
# OR - one must be True
# order of operation not, and, or

#FLOW CONTROL - the first True statement is executed

# IF
name=str(input('name please?'))
if name == 'Alice':
    print('hi alice')

#ELSE - guarantees a clause will be executed
name=str(input('name please?'))
if name == 'Alice':
    print('hi Alice')
else:
    print('stranger')


#ELIF - once a clause is true, all others are skipped.
    #if all ELIFs are false, none will be executed
name=str(input('name please?'))
if name == 'Alice':
    print('hi alice')
elif name == 'Cindie':
    print('hi cindie')
elif name ==('John'):
    print('HI John')
else:
    print('go away')


#WHILE - Continuous loop execution. while keeps looping while true
spam = 0
while spam < 5:
    print('you\'re awesome')
    spam = spam + 1
    #need a clause to end the loop!

#BREAK - Break out of a loop
while True:
    name = input('what\'s your name?')
    if name == 'Cindie':
        break
    print('incorrect')  #letting the user know they are incorrect
print('you broke the cycle')


#CONTINUTE - When reached, this statement will jump back to start of function
while True:
    name = input('name?')
    if name != 'Cindie':
        continue     #normally the function would end here, when the argument is True
    print('Hello Cindie')
    password = input('Type the password dog ')
    if password == 'dog':  #once this argument is also True, we then tell it to Break.
        break
    #once a function argument is True, the whole function stops - typically
    #the "continue" statment forces the function to continue after "True" is reached
    #This allows us to pair 2 "True" statements.
    #the "break" forces the program to stop once both desired "Trues" have passed
    #In a 'While" loop, False answers will make it an infinant loop
    #This is why the question is asked repetedly
    #once it's all true, the function hits the "break' key word.

#Continue and Break statements are always used in loops, to control repetition.

#FOR LOOP

#SINGLE ARGUMENT IN "FOR" LOOP
#Iteration = repetition (it-er-ation)
#range uses the terms: for, in, range(), and a unique variable
#the variable doesn't even need to be refered to in some instances.
for x in range(10):
    print('hello')

for v in range(5):
    print('in order, including 0 ('+ str(v) +')')
    #this prints 'hello' 5 times, followed by the value of "v" 5 times before leaving the for loop.
    #counting begins at ZERO, then prior to last
#you can also use continue and break in the for loop

#TWO ARGUMENTS IN "FOR" LOOP
for x in range(6,14):
    print('start someplace other than 1 ('+ str(x) +')')
    #counting includes 1st number, then prior to the last (6-13)

#THREE ARGUMENTS IN A "FOR" LOOP
for y in range(2, 21, 3):    #the third number is an interval/step argument
    print('interval ('+ str(y) +')')
    #you can also use negative numbers

for y in range(6, -12, -2):    
    print('negative interval ('+ str(y) +')')

#IMPORTING MODULES
    # these are pre-made libraries. Import to use one.
    # examples: random, sys, math, etc
print('I\'m importing random library')
import random
for z in range(5):
    print(random.randint(1,20))
    #this will print 5 random numbers between 1 and 19
    #calling the "random" module, this tells python to look in that library 
    #then using "randint" function from the "random" library

#ROUNDING  # round() to the nearist number, regardless up or down
print ('THIS IS ROUNDING :',  round(8.76)) # need the comma between these two
print (round(70.2))
print (round(79.9))
print (round(70.5))
print (round(-3.3))

#ENDING A PROGRAM
import sys
while True:
    response = input('type exit: \n')  #\n will return to next line for input
    if response == ('exit'):
        sys.exit() #empty means all, from the start.
